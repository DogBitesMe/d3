package bnet.protocol.channel_invitation;

import "lib/protocol/entity.proto";
import "lib/protocol/invitation.proto";
import "lib/rpc/rpc.proto";
import "service/channel/definition/channel.proto";
import "service/channel_invitation/channel_invitation_types.proto";

message AcceptInvitationRequest {
	optional .bnet.protocol.EntityId agent_id = 1;
	required fixed64 invitation_id = 2;
	required uint64 object_id = 3;
}

message AcceptInvitationResponse {
	required uint64 object_id = 1;
}

message SubscribeRequest {
	optional .bnet.protocol.EntityId agent_id = 1;
	required uint64 object_id = 2;
}

message SubscribeResponse {
	repeated .bnet.protocol.channel_invitation.InvitationCollection collection = 1;
	repeated .bnet.protocol.invitation.Invitation received_invitation = 2;
}

message UnsubscribeRequest {
	optional .bnet.protocol.EntityId agent_id = 1;
}

message SuggestInvitationRequest {
	optional .bnet.protocol.EntityId agent_id = 1;
	required .bnet.protocol.EntityId channel_id = 2;
	required .bnet.protocol.EntityId target_id = 3;
	optional .bnet.protocol.EntityId approval_id = 4;
}

message RevokeInvitationRequest {
	optional .bnet.protocol.EntityId agent_id = 1;
	optional .bnet.protocol.EntityId target_id = 2;
	required fixed64 invitation_id = 3;
	required .bnet.protocol.EntityId channel_id = 4;
}

message HasRoomForInvitationRequest {
	required uint32 service_type = 1;
}

message InvitationAddedNotification {
	required .bnet.protocol.invitation.Invitation invitation = 1;
}

message InvitationRemovedNotification {
	required .bnet.protocol.invitation.Invitation invitation = 1;
	optional uint32 reason = 2;
}

message SuggestionAddedNotification {
	required .bnet.protocol.invitation.Suggestion suggestion = 1;
}

