package bnet.protocol.followers;

import "lib/protocol/attribute.proto";
import "lib/protocol/entity.proto";
import "lib/rpc/rpc.proto";

message FollowedUser {
	required .bnet.protocol.EntityId id = 1;
	repeated .bnet.protocol.attribute.Attribute attribute = 2;
}

message SubscribeToFollowersRequest {
	optional .bnet.protocol.EntityId agent_id = 1;
	required uint64 object_id = 2;
}

message SubscribeToFollowersResponse {
	repeated .bnet.protocol.followers.FollowedUser followed_users = 2;
}

message StartFollowingRequest {
	optional .bnet.protocol.EntityId agent_id = 1;
	optional .bnet.protocol.EntityId target_id = 2;
	optional string follower_name = 3;
}

message StartFollowingResponse {
	optional .bnet.protocol.followers.FollowedUser followed_user = 2;
}

message StopFollowingRequest {
	optional .bnet.protocol.EntityId agent_id = 1;
	required .bnet.protocol.EntityId target_id = 2;
}

message StopFollowingResponse {
	optional .bnet.protocol.followers.FollowedUser followed_user = 2;
}

message UpdateFollowerStateRequest {
	optional .bnet.protocol.EntityId agent_id = 1;
	required .bnet.protocol.EntityId target_id = 2;
	repeated .bnet.protocol.attribute.Attribute attribute = 3;
}

message UpdateFollowerStateResponse {
	required .bnet.protocol.EntityId target_id = 2;
	repeated .bnet.protocol.attribute.Attribute attribute = 3;
}

message FollowerNotification {
	required .bnet.protocol.followers.FollowedUser followed_user = 1;
}

