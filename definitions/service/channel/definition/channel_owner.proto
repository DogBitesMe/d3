package bnet.protocol.channel;
import "lib/protocol/attribute.proto";
import "lib/protocol/entity.proto";
import "lib/rpc/rpc.proto";
import "service/channel/definition/channel_types.proto";

message GetChannelIdRequest {
}
message GetChannelIdResponse {
	optional .bnet.protocol.EntityId channel_id = 1;
}
message CreateChannelRequest {
	optional .bnet.protocol.Identity agent_identity = 1;
	optional .bnet.protocol.channel.ChannelState state = 2;
	optional .bnet.protocol.EntityId channel_id = 3;
	optional uint64 object_id = 4;
}
message CreateChannelResponse {
	required uint64 object_id = 1;
	optional .bnet.protocol.EntityId channel_id = 2;
}
message JoinChannelRequest {
	optional .bnet.protocol.Identity agent_identity = 1;
	required .bnet.protocol.EntityId channel_id = 2;
	required uint64 object_id = 3;
	repeated .bnet.protocol.EntityId friend_account_id = 4;
}
message JoinChannelResponse {
	optional uint64 object_id = 1;
	optional bool require_friend_validation = 2 [default = false];
	repeated .bnet.protocol.EntityId privileged_account = 3;
}
message FindChannelRequest {
	required .bnet.protocol.attribute.AttributeFilter filter = 1;
}
message FindChannelResponse {
	repeated .bnet.protocol.channel.ChannelDescription channel = 1;
}
message GetChannelInfoRequest {
	optional .bnet.protocol.EntityId agent_id = 1;
	required .bnet.protocol.EntityId channel_id = 2;
}
message GetChannelInfoResponse {
	optional .bnet.protocol.channel.ChannelInfo channel_info = 1;
}
service ChannelOwner {
	rpc GetChannelId (.bnet.protocol.channel.GetChannelIdRequest) returns (.bnet.protocol.channel.GetChannelIdResponse);
	rpc CreateChannel (.bnet.protocol.channel.CreateChannelRequest) returns (.bnet.protocol.channel.CreateChannelResponse);
	rpc JoinChannel (.bnet.protocol.channel.JoinChannelRequest) returns (.bnet.protocol.channel.JoinChannelResponse);
	rpc FindChannel (.bnet.protocol.channel.FindChannelRequest) returns (.bnet.protocol.channel.FindChannelResponse);
	rpc GetChannelInfo (.bnet.protocol.channel.GetChannelInfoRequest) returns (.bnet.protocol.channel.GetChannelInfoResponse);
}
